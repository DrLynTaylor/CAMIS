---
title: "Confidence Intervals for Proportions in R"
---

## Introduction

There are several ways to calculate a confidence interval (CI) for a proportion. You need to select the method based on if you have a 1 sample proportion, 2 independent samples proportions or 2 matched samples and you want a CI for the difference in proportions. The method selected is also dependent on whether your proportion is close to 0 or 1 (or near to the 0.5 midpoint), and your sample size.

For more information about these methods in R & SAS, including which performs better in different scenarios see [Five Confidence Intervals for Proportions That You Should Know about](https://towardsdatascience.com/five-confidence-intervals-for-proportions-that-you-should-know-about-7ff5484c024f)^1^ and [Confidence Intervals for Binomial Proportion Using SAS](https://www.lexjansen.com/sesug/2015/103_Final_PDF.pdf)^2^

## Data used

The adcibc data stored [here](../data/adcibc.csv) was used in this example, creating a binary treatment variable `trt` taking the values of `ACT` or `PBO` and a binary response variable `resp` taking the values of `Yes` or `No`. For this example, a response is defined as a score greater than 4.

```{r}
#| echo: FALSE
#| include: FALSE
library(tidyverse)
library(cardx)
library(PropCIs)
adcibc2<-read_csv("../data/adcibc.csv")

adcibc<- adcibc2 %>% 
        select(AVAL,TRTP) %>% 
        mutate(resp=if_else(AVAL>4,"Yes","No")) %>% 
        mutate(respn=if_else(AVAL>4,1,0)) %>% 
        mutate(trt=if_else(TRTP=="Placebo","PBO","ACT"))%>% 
        select(trt,resp, respn) 

# cardx package required a vector with 0 and 1s
pbo<- filter(adcibc,trt=="PBO") %>% 
      select(respn)
pbo2<-pbo$respn

act<-filter(adcibc,trt=="ACT") %>% 
     select(respn)
act2<-act$respn

#PropsCIs package required just the number of events & total number
peve<-sum(pbo2)
ptot<-length(pbo2)
aeve<-sum(act2)
atot<-length(act2)

```

The below shows that for the Actual Treatment, there are 36 responders out of 154 subjects = 0.234 (23.4% responders).

```{r}
#| echo: FALSE
adcibc %>% 
  group_by(trt,resp) %>% 
  tally()
```

## Packages

The {cardx} package is an extension of the {cards} package, providing additional functions to create Analysis Results Data Objects (ARDs)^1^. It was developed as part of {NEST} and pharmaverse. This package requires the binary endpoint to be a logical (TRUE/FALSE) vector or a numeric/integer coded as (0, 1) with 1 (TRUE) being the success you want to calculate the confidence interval for.

Code example: `proportion_ci_clopper_pearson(<resp_var>,conf.level=0.95) %>%    as_tibble()`

Example data format needed for {cardx}

```{r}
#| echo: FALSE
#Data for use with cardrx takes the format 0s and 1s
head(act2,30)
```

The {PropCIs} package produces CIs for methods such as Blaker and Midp which aren't available in {cardx} but are available in SAS. It also calculates CIs for Clopper-Pearson, Wald, Wilson, Agresti-coull and these align in results to cardx to at least the 7th decimal place. The {PropsCIs} package requires just the number of events (numerator number of successes) & total number of subjects (denominator). Given Blaker and Midp are rarely used in practice, detail is not provided here, but were found to agree with SAS to the 5th decimal place.

Code example: `exactci(x=<count of successes> , n=<Total>, conf.level=0.95)`

Example data format needed for {PropCIs}

```{r}
#| echo: FALSE
#Data for use with PropsCIs takes the format nn/NN total success/total
head(aeve,10)
head(atot,10)
```

## Methods for Calculating Confidence Intervals for a single proportion using cardx and PropCIs

For more technical derivation and reasons for use of each of the methods listed below, see the corresponding [SAS page](https://psiaims.github.io/CAMIS/SAS/ci_for_prop.html).

Let's start by calculating a Confidence interval for the proportion of successes observed in the Active Treatment group.

### Clopper-Pearson (Exact or binomial CI) Method

Clopper-Pearson Exact CI is one of the most popular methods, it is often good for small sample sizes when the proportion is not close to the tails (0,1), but it can be too conservative (too wide an interval compared to the interval containing the true population proportion 95% of the time).

The cardx package calculates the Clopper-Pearson score by calling stats::binom.test() function.

```{r}
proportion_ci_clopper_pearson(act2,conf.level=0.95) %>% 
  as_tibble()

```

### Normal Approximation (Wald or asymptotic CI) Method

In large random samples from independent trials, the sampling distribution of proportions approximately follows the normal distribution. The expectation of a sample proportion is the corresponding population proportion. Therefore, based on a sample of size $n$, a $(1-\alpha)\%$ confidence interval for population proportion can be calculated using normal approximation as follows:

$p\approx \hat p \pm z_\alpha \sqrt{\hat p(1-\hat p)}/{n}$, where $\hat p$ is the sample proportion, $z_\alpha$ is the $1-\alpha/2$ quantile of a standard normal distribution corresponding to level $\alpha$, and $\sqrt{\hat p(1-\hat p)}/{n}$ is the standard error.

## Example code

The following code calculates a confidence interval for a binomial proportion using normal approximation equation manually. This is replicated exactly using the `` `cardx::proportion_ci_wald function` `` which also allows the continuity correction to be applied.

```{r}
    # sample proportion by trt
summary <- adcibc %>% 
           group_by(trt,resp) %>% 
           tally()  %>% 
           ungroup() %>% 
           group_by(trt) %>% 
           mutate(total=sum(n)) %>% 
           mutate(p=n/total)

    # Calculate standard error and 95% wald confidence intervals for population proportion
waldci <-summary %>% 
         filter(resp=="Yes") %>% 
         mutate(se=sqrt(p*(1-p)/total)) %>% 
         mutate(lower_ci=(p-qnorm(1-0.05/2)*se)) %>% 
         mutate(upper_ci=(p+qnorm(1-0.05/2)*se)) 
waldci  

#cardx package Wald method without continuity correction
proportion_ci_wald(act2,conf.level=0.95,correct=FALSE) %>% 
  as_tibble()

#cardx package Wald method with continuity correction
proportion_ci_wald(act2,conf.level=0.95,correct=TRUE) %>% 
  as_tibble()
```

### Wilson (score) Method

The cardx package calculates the Wilson (score) method by calling stats::prop.test() function.

The package also contains a function for proportion_ci_strat_wilson() which calculates the stratified Wilson CIs for unequal proportions as described [here](https://search.r-project.org/CRAN/refmans/cardx/html/proportion_ci.html)

```{r}
#cardx package Wilson method without continuity correction
proportion_ci_wilson(act2,conf.level=0.95,correct=FALSE) %>% 
  as_tibble()


#cardx package Wilson method with continuity correction
proportion_ci_wilson(act2,conf.level=0.95,correct=TRUE) %>% 
  as_tibble()

```

### Agresti-Coull Method

The cardx package calculates the Agresti-Coull method using the equation from the published method by Alan Agresti & Brent Coull based on adding 2 successes and 2 failures before computing the wald CI. The CI is truncated, when it overshoots the boundary (\<0 or \>1).

```{r}

#cardx package agresti_coull method 
proportion_ci_agresti_coull(act2,conf.level=0.95) %>% 
  as_tibble()

```

```         
```

### Binomial based MidP Method

As the MidP method is not available in {cardx}, the PropCIs package example is shown below. However, in practice this method is rarely used.

```{r}
#PropCIs package Mid P method
midPci(x=aeve, n=atot, conf.level=0.95)
```

### Jeffreys Method

Jeffreys method is a particular type of Bayesian Highest Probability Density (HPD) Method. For proportions, the beta distribution is generally used for the prior, which consists of two parameters alpha and beta. Setting alpha=beta=0.5 is called Jeffrey's prior. NOTE: if you want to use any other priors, you can use `binom.bayes` which estimates a credible interval for proportions.

```{r}
#cardx package jeffreys method 
proportion_ci_jeffreys(act2,conf.level=0.95) %>% 
  as_tibble()
```

### Blaker Method using PropCIs

The blaker method is available in the the package PropCIs. In practice this method is rarely used.

```{r}
blakerci(aeve, atot, conf.level=0.95, tolerance=1e-05)

```

### Altman Newcombe Reccomended Method 

Available by manual calculations in R only. See [SAS page](https://psiaims.github.io/CAMIS/SAS/ci_for_prop.html) for the equations.

## Methods for Calculating Confidence Intervals for a matched pair proportion

When you have 2 measurements on the same subject, the 2 sets of measures are not independent and you have matched pair of responses which result in 2 proportions which are not independent.

A suitable method for matched pair proportions should be used. Altman et al^3^ describes the equations for both the normal approximation and Altman Newcombe recommended method for Two sample paired data. In practice this is not commonly used, since there are other methods of testing association used for paired data analysis and cross-over style trials.

## Methods for Calculating Confidence Intervals for 2 independent samples proportion 

### Altman Newcombe Recommended Method 

Available by manual calculations in R only. See [SAS page](https://psiaims.github.io/CAMIS/SAS/ci_for_prop.html) for the equations. NOTE: the [documentation](https://search.r-project.org/CRAN/refmans/MKinfer/html/binomDiffCI.html) for `binomDiffCI` implies that this is the same method as the Wilson method, however replication using the data in our example did not find that to be the same and that this is a different method.

## References

1.  [pharmaverse cardx package](https://insightsengineering.github.io/cardx/main/#:~:text=The%20%7Bcardx%7D%20package%20is%20an%20extension%20of%20the,Data%20Objects%20%28ARDs%29%20using%20the%20R%20programming%20language.)
2.  [PropCIs package](https://cran.r-project.org/web//packages/PropCIs/PropCIs.pdf)
3.  D. Altman, D. Machin, T. Bryant, M. Gardner (eds). Statistics with Confidence: Confidence Intervals and Statistical Guidelines, 2nd edition. John Wiley and Sons 2000.
